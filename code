#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Node {
    char ch;
    int freq;
    struct Node *left, *right;
} Node;

typedef struct MinHeap {
    int size;
    int capacity;
    Node** array;
} MinHeap;

Node* createNode(char ch, int freq) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->ch = ch;
    newNode->freq = freq;
    newNode->left = newNode->right = NULL;
    return newNode;
}

MinHeap* createMinHeap(int capacity) {
    MinHeap* minHeap = (MinHeap*)malloc(sizeof(MinHeap));
    minHeap->capacity = capacity;
    minHeap->size = 0;
    minHeap->array = (Node*)malloc(minHeap->capacity * sizeof(Node));
    return minHeap;
}

void swapNodes(Node** a, Node** b) {
    Node* temp = *a;
    *a = *b;
    *b = temp;
}

void minHeapify(MinHeap* minHeap, int index) {
    int smallest = index;
    int left = 2 * index + 1;
    int right = 2 * index + 2;

    if (left < minHeap->size && minHeap->array[left]->freq < minHeap->array[smallest]->freq)
        smallest = left;

    if (right < minHeap->size && minHeap->array[right]->freq < minHeap->array[smallest]->freq)
        smallest = right;

    if (smallest != index) {
        swapNodes(&minHeap->array[smallest], &minHeap->array[index]);
        minHeapify(minHeap, smallest);
    }
}

int isSizeOne(MinHeap* minHeap) {
    return minHeap->size == 1;
}

Node* extractMin(MinHeap* minHeap) {
    Node* temp = minHeap->array[0];
    minHeap->array[0] = minHeap->array[minHeap->size - 1];
    --minHeap->size;
    minHeapify(minHeap, 0);
    return temp;
}

void insertMinHeap(MinHeap* minHeap, Node* node) {
    ++minHeap->size;
    int i = minHeap->size - 1;
    while (i && node->freq < minHeap->array[(i - 1) / 2]->freq) {
        minHeap->array[i] = minHeap->array[(i - 1) / 2];
        i = (i - 1) / 2;
    }
    minHeap->array[i] = node;
}

Node* buildHuffmanTree(char* data, int* freq, int size) {
    Node *left, *right, *top;
    MinHeap* minHeap = createMinHeap(size);

    for (int i = 0; i < size; ++i)
        insertMinHeap(minHeap, createNode(data[i], freq[i]));

    while (!isSizeOne(minHeap)) {
        left = extractMin(minHeap);
        right = extractMin(minHeap);

        top = createNode('$', left->freq + right->freq);
        top->left = left;
        top->right = right;

        insertMinHeap(minHeap, top);
    }
    return extractMin(minHeap);
}

void printHuffmanCodes(Node* root, int* arr, int top, char codes[][256]) {
    if (root->left) {
        arr[top] = 0;
        printHuffmanCodes(root->left, arr, top + 1, codes);
    }

    if (root->right) {
        arr[top] = 1;
        printHuffmanCodes(root->right, arr, top + 1, codes);
    }

    if (!root->left && !root->right) {
        char code[256];
        for (int i = 0; i < top; ++i) {
            code[i] = arr[i] + '0';
        }
        code[top] = '\0';
        strcpy(codes[root->ch], code);
    }
}

int calculateCompressedSize(char* text, char codes[][256], int textLength) {
    int size = 0;
    for (int i = 0; i < textLength; ++i) {
        size += strlen(codes[text[i]]);
    }
    return size;
}

int calculateOriginalSize(char* text) {
    return strlen(text) * 8;
}

int main() {
    char text[1000];
    printf("Enter text to compress: ");
    fgets(text, 1000, stdin);

    int freq[256] = {0};
    int n = strlen(text);
    for (int i = 0; i < n; ++i)
        freq[(unsigned char)text[i]]++;

    char data[256];
    int freqArray[256];
    int uniqueCharCount = 0;
    for (int i = 0; i < 256; ++i) {
        if (freq[i] > 0) {
            data[uniqueCharCount] = i;
            freqArray[uniqueCharCount] = freq[i];
            uniqueCharCount++;
        }
    }

    Node* root = buildHuffmanTree(data, freqArray, uniqueCharCount);

    char codes[256][256];
    int arr[256];
    printHuffmanCodes(root, arr, 0, codes);

    int originalSize = calculateOriginalSize(text);
    int compressedSize = calculateCompressedSize(text, codes, n);

    printf("Original size: %d bits\n", originalSize);
    printf("Compressed size: %d bits\n", compressedSize);

    return 0;
}
